import{_ as a,c as s,o as e,N as n}from"./chunks/framework.72fe3cca.js";const y=JSON.parse('{"title":"在GNU/Linux上开发","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/Develop_on_Linux.md","lastUpdated":1672678663000}'),l={name:"zh/guide/Develop_on_Linux.md"},o=n(`<h1 id="在gnu-linux上开发" tabindex="-1">在GNU/Linux上开发 <a class="header-anchor" href="#在gnu-linux上开发" aria-label="Permalink to &quot;在GNU/Linux上开发&quot;">​</a></h1><h2 id="使用xmake" tabindex="-1">使用xmake <a class="header-anchor" href="#使用xmake" aria-label="Permalink to &quot;使用xmake&quot;">​</a></h2><h3 id="第一步-安装xmake和qt-5" tabindex="-1">第一步：安装xmake和Qt 5 <a class="header-anchor" href="#第一步-安装xmake和qt-5" aria-label="Permalink to &quot;第一步：安装xmake和Qt 5&quot;">​</a></h3><p>以Debian及衍生版为例：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">sudo add-apt-repository ppa:xmake-io/xmake</span></span>
<span class="line"><span style="color:#A6ACCD;">sudo apt update</span></span>
<span class="line"><span style="color:#A6ACCD;">sudo apt upgrade --yes gcc</span></span>
<span class="line"><span style="color:#A6ACCD;">sudo apt install --yes qtbase5-dev libqt5svg5-dev xmake</span></span></code></pre></div><p>有时候需要保持xrepo是最新的，以保证使用最新的依赖的构建定义</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">xrepo update-repo</span></span></code></pre></div><h3 id="第二步-编译" tabindex="-1">第二步：编译 <a class="header-anchor" href="#第二步-编译" aria-label="Permalink to &quot;第二步：编译&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">xmake config -m debug --yes</span></span>
<span class="line"><span style="color:#A6ACCD;">xmake build --yes --verbose --diagnosis --jobs=8 --all</span></span></code></pre></div><h3 id="第三步-运行单元测试" tabindex="-1">第三步：运行单元测试 <a class="header-anchor" href="#第三步-运行单元测试" aria-label="Permalink to &quot;第三步：运行单元测试&quot;">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">TEXMACS_PATH</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">$PWD</span><span style="color:#C3E88D;">/TeXmacs</span><span style="color:#A6ACCD;"> xmake run --yes --verbose --diagnosis --group</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">tests</span></span></code></pre></div><h3 id="第四步-安装到build-package" tabindex="-1">第四步: 安装到<code>build/package</code> <a class="header-anchor" href="#第四步-安装到build-package" aria-label="Permalink to &quot;第四步: 安装到\`build/package\`&quot;">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">xmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build/package</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mogan_install</span></span></code></pre></div><h3 id="第五步-启动墨干编辑器" tabindex="-1">第五步：启动墨干编辑器 <a class="header-anchor" href="#第五步-启动墨干编辑器" aria-label="Permalink to &quot;第五步：启动墨干编辑器&quot;">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">build/package/bin/mogan</span></span></code></pre></div><h2 id="使用cmake" tabindex="-1">使用cmake <a class="header-anchor" href="#使用cmake" aria-label="Permalink to &quot;使用cmake&quot;">​</a></h2><p>假定你已经在mogan的源代码目录：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span>
<span class="line"><span style="color:#FFCB6B;">cmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">..</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-DCMAKE_INSTALL_PREFIX=</span><span style="color:#A6ACCD;">$HOME</span><span style="color:#C3E88D;">/software</span></span>
<span class="line"><span style="color:#FFCB6B;">make</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-j12</span></span></code></pre></div><p>编译安装完成之后，可以这样启动墨干：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">$HOME/software/bin/mogan.sh</span></span></code></pre></div><p>使用<code>make install</code>，然后在单独的目录里面做开发，能够排除一些干扰。如果你对源代码比较了解，可以通过更改TEXMACS_PATH的方式，直接在源代码中更改Scheme这部分代码，不需要重新编译就可以测试你的更改。</p>`,21),p=[o];function t(c,i,r,d,C,h){return e(),s("div",null,p)}const m=a(l,[["render",t]]);export{y as __pageData,m as default};
