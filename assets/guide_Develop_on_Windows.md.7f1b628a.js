import{_ as s,c as a,o as n,N as o}from"./chunks/framework.72fe3cca.js";const u=JSON.parse('{"title":"Developing for Windows","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Develop_on_Windows.md","lastUpdated":1674911793000}'),e={name:"guide/Develop_on_Windows.md"},l=o(`<h1 id="developing-for-windows" tabindex="-1">Developing for Windows <a class="header-anchor" href="#developing-for-windows" aria-label="Permalink to &quot;Developing for Windows&quot;">​</a></h1><h2 id="using-xmake-on-windows" tabindex="-1">Using xmake on Windows <a class="header-anchor" href="#using-xmake-on-windows" aria-label="Permalink to &quot;Using xmake on Windows&quot;">​</a></h2><p>This project uses variant length array, so cannot be compiled by msvs. It is recommand to use mingw as compiler.</p><h3 id="step-1-install-xmake-and-qt-5" tabindex="-1">Step 1: Install xmake and Qt 5 <a class="header-anchor" href="#step-1-install-xmake-and-qt-5" aria-label="Permalink to &quot;Step 1: Install xmake and Qt 5&quot;">​</a></h3><p>Developers should install such tools:</p><ul><li><a href="https://www.qt.io/download" target="_blank" rel="noreferrer">Qt</a><ul><li>only qt library for mingw 8.1.0 is needed, it is ok to use install qt5 and qt6. Other qt framework like qt script is not needed.</li><li>recommand to install mingw 8.1.0, which can be found in tools.</li></ul></li><li><a href="https://github.com/msys2/msys2-installer/releases" target="_blank" rel="noreferrer">msys environment</a></li><li>mingw 8.1.0 compiler (see below).</li><li>xmake (see below).</li></ul><p>Xmake can be installed either from msys pacman, or from standalone installer for windows.</p><p><strong>CAUTIONS</strong>: Mingw in msys pacman is too new thus imconpatible for this project. Please install mingw 8.1.0 for this project, from either Qt installer or from chocolate.</p><p>Sometimes, we need the latest xrepo:</p><div class="language-pwsh"><button title="Copy Code" class="copy"></button><span class="lang">pwsh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">xrepo update-repo</span></span></code></pre></div><h3 id="step-2-compile" tabindex="-1">Step 2: Compile <a class="header-anchor" href="#step-2-compile" aria-label="Permalink to &quot;Step 2: Compile&quot;">​</a></h3><p>Run these command in msys environment.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">xmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--qt=</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">newly</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">installed</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">qt</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">addres</span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">/5.x.x/mingw81_64</span></span>
<span class="line"><span style="color:#FFCB6B;">xmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--jobs=</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">numbers</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">processes</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">your</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">computer</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">can</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">support,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">same</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mak</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="step-3-run-unit-test" tabindex="-1">Step 3: Run unit test <a class="header-anchor" href="#step-3-run-unit-test" aria-label="Permalink to &quot;Step 3: Run unit test&quot;">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">windeployqt</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--compiler-runtime</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./build/mingw/x86_64/release/</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-printsupport</span></span>
<span class="line"><span style="color:#FFCB6B;">xmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--yes</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--verbose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--diagnosis</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--group=tests</span></span>
<span class="line"><span style="color:#FFCB6B;">xmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--yes</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--verbose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--diagnosis</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--group=keneral_tests</span></span></code></pre></div><h3 id="step-4-install-to-build-package" tabindex="-1">Step 4: Install to <code>build/package</code> <a class="header-anchor" href="#step-4-install-to-build-package" aria-label="Permalink to &quot;Step 4: Install to \`build/package\`&quot;">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">xmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build/package</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mogan_install</span></span>
<span class="line"><span style="color:#FFCB6B;">windeployqt</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--compiler-runtime</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./build/package/bin/</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-printsupport</span></span></code></pre></div><p>There are other binary used by mogan as optional dependencies, you can found them at <a href="https://github.com/XmacsLabs/mogan-dependencies" target="_blank" rel="noreferrer">xmacslabs/mogan-dependencies</a>.</p><h3 id="step-5-launch-mogan-editor" tabindex="-1">Step 5: Launch Mogan Editor <a class="header-anchor" href="#step-5-launch-mogan-editor" aria-label="Permalink to &quot;Step 5: Launch Mogan Editor&quot;">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">build/package/bin/mogan.exe</span></span></code></pre></div><h3 id="optional-vscode-support" tabindex="-1">Optional: Vscode support <a class="header-anchor" href="#optional-vscode-support" aria-label="Permalink to &quot;Optional: Vscode support&quot;">​</a></h3><p>Developers using Vscode can use xmake to generate <code>compile_command.json</code>, which can be recognized by C/C++ plugin to provide semantics highlight and so on.</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">xmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">project</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--kind=compile_commands</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./.vscode</span></span></code></pre></div><p>then modify <code>.vscode/c_cpp_properties.json</code> to tell C++ lsp configs of this project:</p><div class="language-jsonc"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">configurations</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// other configs</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">compilerPath</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;your configuration&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">cppStandard</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">gnu++17</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">intelliSenseMode</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">windows-gcc-x64</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">compileCommands</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.vscode/compile_commands.json</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h2 id="using-cmake-on-linux-or-wsl-environment-to-cross-compile" tabindex="-1">Using CMake on Linux or WSL environment to cross-compile <a class="header-anchor" href="#using-cmake-on-linux-or-wsl-environment-to-cross-compile" aria-label="Permalink to &quot;Using CMake on Linux or WSL environment to cross-compile&quot;">​</a></h2><p>We need to install WSL Ubuntu 20.04 on Windows or install a Windows virtualbox on Ubuntu 20.04. Because building is done on Ubuntu and testing is done on Windows.</p><p>First of all, we need to download MXE and install all the related dependencies (step 1 and step 2): <a href="https://texmacs.github.io/notes/docs/build-using-cmake-and-mxe-on-wsl.html" target="_blank" rel="noreferrer">https://texmacs.github.io/notes/docs/build-using-cmake-and-mxe-on-wsl.html</a></p><p>Assuming you are in the project root of mogan:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">rm -rf build/</span></span>
<span class="line"><span style="color:#A6ACCD;">./packages/windows/package.sh</span></span></code></pre></div><p>After the packaging, we need to share or copy the directory between the host system and the guest system, and then test Mogan in Windows.</p>`,31),p=[l];function t(r,c,i,C,d,y){return n(),a("div",null,p)}const m=s(e,[["render",t]]);export{u as __pageData,m as default};
