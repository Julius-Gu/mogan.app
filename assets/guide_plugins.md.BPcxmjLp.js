import{_ as n,c as i,o as e,a2 as s}from"./chunks/framework.B05PtJDG.js";const _=JSON.parse('{"title":"Plugins","description":"","frontmatter":{},"headers":[],"relativePath":"guide/plugins.md","filePath":"guide/plugins.md","lastUpdated":1711517195000}'),t={name:"guide/plugins.md"},a=s('<h1 id="plugins" tabindex="-1">Plugins <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;Plugins&quot;">â€‹</a></h1><p>The plugins of Mogan can be divided into two types: built-in plugins and community plugins. According to their functions, they can be divided into:</p><ul><li><strong>Binary plugins</strong>: provide scheme routines to find the binary and use the binary.</li><li><strong>Image plugins</strong>: provide format conversions for different image formats, such as the PDF Image plugin.</li><li><strong>Language plugins</strong>: provide dictionaries and styles for different natural languages, such as the Chinese Language plugin.</li><li><strong>Data format plugins</strong>: These plugins are used to process data format conversions, such as the HTML Data plugin and LaTeX Data plugin.</li><li><strong>Code plugins</strong>: provide code highlighting definitions and corresponding styles and editor customizations for programming languages, such as the Python Code plugin.</li><li><strong>Session plugins</strong>: provide integration with external systems and have context, such as the Maxima Session plugin.</li></ul>',3),o=[a];function r(g,l,u,d,p,c){return e(),i("div",null,o)}const m=n(t,[["render",r]]);export{_ as __pageData,m as default};
