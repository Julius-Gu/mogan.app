import{_ as e,c as i,o as t,a4 as a}from"./chunks/framework.B2EPA2lv.js";const y=JSON.parse('{"title":"Binary Plugin","description":"","frontmatter":{},"headers":[],"relativePath":"guide/plugin_binary.md","filePath":"guide/plugin_binary.md","lastUpdated":1713151243000}'),n={name:"guide/plugin_binary.md"},s=a('<h1 id="binary-plugin" tabindex="-1">Binary Plugin <a class="header-anchor" href="#binary-plugin" aria-label="Permalink to &quot;Binary Plugin&quot;">​</a></h1><p>A binary plugin is a type of plugin that is primarily used for:</p><ul><li>Locating the position of executable files and determining whether they exist.</li><li>Invoking executable files based on actual needs and encapsulating pre-processing logic for input and post-processing logic for output.</li></ul><h2 id="sharing-and-exclusivity" tabindex="-1">Sharing and Exclusivity <a class="header-anchor" href="#sharing-and-exclusivity" aria-label="Permalink to &quot;Sharing and Exclusivity&quot;">​</a></h2><p>Shared binary plugins are primarily located in <code>$TEXMACS_PATH/plugins/binary</code>, with each executable file corresponding to a source code file:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$TEXMACS_PATH/plugins/binary/progs/binary/&lt;name&gt;.scm</span></span></code></pre></div><p>For example, the source code for Ghostscript&#39;s gs command corresponds to:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$TEXMACS_PATH/plugins/binary/progs/binary/gs.scm</span></span></code></pre></div><p>Exclusive binary plugins are located in:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$TEXMACS_PATH/plugins/&lt;name&gt;/progs/binary/&lt;name&gt;.scm</span></span></code></pre></div><p>For instance, the source code corresponding to the executable file for the Octave plugin is located in:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$TEXMACS_PATH/plugins/octave/progs/binary/octave.scm</span></span></code></pre></div><h2 id="three-essential-elements" tabindex="-1">Three Essential Elements <a class="header-anchor" href="#three-essential-elements" aria-label="Permalink to &quot;Three Essential Elements&quot;">​</a></h2><table><thead><tr><th>Function</th><th>Purpose</th></tr></thead><tbody><tr><td><code>(find-binary-xyz)</code></td><td>Locates the position of the xyz executable file. If it does not exist, it returns <code>(url-none)</code>.</td></tr><tr><td><code>(has-binary-xyz?)</code></td><td>Determines whether the xyz executable file exists. If it exists, it returns <code>#t</code>; if not, it returns <code>#f</code>.</td></tr><tr><td><code>(version-binary-xyz?)</code></td><td>Returns the version of the xyz executable file. If the executable file does not exist, it returns an empty string; otherwise, it returns a string containing version information.</td></tr></tbody></table><h2 id="detailed-explanation-of-find-binary-xyz" tabindex="-1">Detailed Explanation of <code>(find-binary-xyz)</code> <a class="header-anchor" href="#detailed-explanation-of-find-binary-xyz" aria-label="Permalink to &quot;Detailed Explanation of `(find-binary-xyz)`&quot;">​</a></h2><ul><li>If the configuration item <code>plugin:binary</code> is set to <code>off</code>, then <code>(find-binary-xyz)</code> returns <code>(url-none)</code>. <ul><li>If the configuration item <code>plugin:binary:xyz</code> is not <code>default</code>, it checks whether the path specified in this configuration item exists. If it does, it returns the path of the xyz executable file. <ul><li>If the candidate path defined in xyz.scm, <code>(xyz-binary-candidates)</code>, exists, it returns that candidate path. <ul><li>Finally, it searches for the xyz executable file directly in the system path.</li></ul></li></ul></li></ul></li></ul><p>The author of the binary plugin only needs to focus on whether the implementation of <code>(xyz-binary-candidates)</code> is reasonable. The configuration item <code>plugin:binary</code> currently (1.2.5.2) only supports configuration using Scheme code such as <code>(set-preference &quot;plugin:binary&quot; &quot;/path/to/binary/xyz&quot;)</code>.</p><h2 id="help-plugins-binaries" tabindex="-1">Help -&gt; Plugins -&gt; Binaries <a class="header-anchor" href="#help-plugins-binaries" aria-label="Permalink to &quot;Help -&gt; Plugins -&gt; Binaries&quot;">​</a></h2><p>By clicking &quot;Help -&gt; Plugins -&gt; Binaries&quot; in Texmacs, you can find three runnable Scheme code snippets:</p><ol><li>How to locate the path of a specific binary plugin.</li><li>How to customize the path of a specific binary plugin.</li><li>How to disable all binary plugins.</li></ol>',20),o=[s];function l(r,c,d,p,u,h){return t(),i("div",null,o)}const b=e(n,[["render",l]]);export{y as __pageData,b as default};
