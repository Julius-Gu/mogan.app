import{_ as s,c as t,o as e,V as a}from"./chunks/framework.249fa23d.js";const _=JSON.parse('{"title":"How to test","description":"","frontmatter":{},"headers":[],"relativePath":"guide/Test.md","filePath":"guide/Test.md","lastUpdated":1695906594000}'),n={name:"guide/Test.md"},l=a(`<h1 id="how-to-test" tabindex="-1">How to test <a class="header-anchor" href="#how-to-test" aria-label="Permalink to &quot;How to test&quot;">​</a></h1><p>For Developers, there are two way of testing: Unit tests and Integration tests</p><h2 id="unit-tests" tabindex="-1">Unit Tests <a class="header-anchor" href="#unit-tests" aria-label="Permalink to &quot;Unit Tests&quot;">​</a></h2><h3 id="c-unit-tests" tabindex="-1">C++ Unit Tests <a class="header-anchor" href="#c-unit-tests" aria-label="Permalink to &quot;C++ Unit Tests&quot;">​</a></h3><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>bin/test_all</td><td>Run all C++ tests</td></tr><tr><td>bin/test_kernel_l1</td><td>Run C++ tests in Kernel L1</td></tr><tr><td>bin/test_kernel_l2</td><td>Run C++ tests in Kernel L2</td></tr><tr><td>bin/test_only [target-name]</td><td>Only run the specified C++ unit test</td></tr></tbody></table><h3 id="scheme-unit-tests" tabindex="-1">Scheme Unit Tests <a class="header-anchor" href="#scheme-unit-tests" aria-label="Permalink to &quot;Scheme Unit Tests&quot;">​</a></h3><p>Build, install and launch Mogan Editor, and then insert the Scheme session to run the Scheme unit tests:</p><div class="language-scheme"><button title="Copy Code" class="copy"></button><span class="lang">scheme</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">run-all-tests</span><span style="color:#89DDFF;">)</span></span></code></pre></div><h2 id="integration-tests" tabindex="-1">Integration Tests <a class="header-anchor" href="#integration-tests" aria-label="Permalink to &quot;Integration Tests&quot;">​</a></h2><p>Source code and docs for integration tests are in <code>TeXmacs/tests</code>. To run integration tests, one must build and install mogan:</p><ul><li>use <code>bin/test_all_doc</code> to run all integration tests</li><li>use <code>xmake run [target-name]</code> to run the specific integration test, eg. <code>xmake run 9_1</code></li></ul><h2 id="list-all-targets" tabindex="-1">List all targets <a class="header-anchor" href="#list-all-targets" aria-label="Permalink to &quot;List all targets&quot;">​</a></h2><p>Use the following commandline to list all targets. The targets (ending with <code>_test</code>) are C++ unit tests, the targets like <code>[0_9]*_[0_9]*</code> are integration tests.</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">show</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-l</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">targets</span></span>
<span class="line"><span style="color:#FFCB6B;">color_test</span><span style="color:#A6ACCD;">        </span><span style="color:#C3E88D;">parsexml_test</span><span style="color:#A6ACCD;">          </span><span style="color:#C3E88D;">qt_utilities_test</span></span>
<span class="line"><span style="color:#FFCB6B;">string_test</span><span style="color:#A6ACCD;">       </span><span style="color:#C3E88D;">converter_test</span><span style="color:#A6ACCD;">         </span><span style="color:#F78C6C;">17</span><span style="color:#C3E88D;">_1</span></span>
<span class="line"><span style="color:#FFCB6B;">list_test</span><span style="color:#A6ACCD;">         </span><span style="color:#C3E88D;">keyword_parser_test</span><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">image_files_test</span></span>
<span class="line"><span style="color:#FFCB6B;">xml_test</span><span style="color:#A6ACCD;">          </span><span style="color:#F78C6C;">9</span><span style="color:#C3E88D;">_1</span><span style="color:#A6ACCD;">                    </span><span style="color:#C3E88D;">array_test</span></span>
<span class="line"><span style="color:#FFCB6B;">12_1</span><span style="color:#A6ACCD;">              </span><span style="color:#C3E88D;">mogan_install</span><span style="color:#A6ACCD;">          </span><span style="color:#C3E88D;">queryxml_test</span></span>
<span class="line"><span style="color:#FFCB6B;">point_test</span><span style="color:#A6ACCD;">        </span><span style="color:#C3E88D;">tree_test</span><span style="color:#A6ACCD;">              </span><span style="color:#C3E88D;">hashmap_test</span></span>
<span class="line"><span style="color:#FFCB6B;">rectangle_test</span><span style="color:#A6ACCD;">    </span><span style="color:#C3E88D;">mogan</span><span style="color:#A6ACCD;">                  </span><span style="color:#C3E88D;">env_length_test</span></span>
<span class="line"><span style="color:#FFCB6B;">url_test</span><span style="color:#A6ACCD;">          </span><span style="color:#C3E88D;">libkernel_l1</span><span style="color:#A6ACCD;">           </span><span style="color:#C3E88D;">analyze_test</span></span>
<span class="line"><span style="color:#FFCB6B;">libkernel_l2</span><span style="color:#A6ACCD;">      </span><span style="color:#C3E88D;">hashset_test</span><span style="color:#A6ACCD;">           </span><span style="color:#C3E88D;">libmogan</span></span></code></pre></div>`,14),o=[l];function r(p,c,i,C,d,h){return e(),t("div",null,o)}const u=s(n,[["render",r]]);export{_ as __pageData,u as default};
