import{_ as s,c as a,o as n,V as l}from"./chunks/framework.249fa23d.js";const m=JSON.parse('{"title":"开发者文档","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/Develop_on_Windows.md","filePath":"zh/guide/Develop_on_Windows.md","lastUpdated":1706584964000}'),o={name:"zh/guide/Develop_on_Windows.md"},e=l(`<h1 id="开发者文档" tabindex="-1">开发者文档 <a class="header-anchor" href="#开发者文档" aria-label="Permalink to &quot;开发者文档&quot;">​</a></h1><p>墨干的代码使用变长数组，因此不能用msvc来编译开发。推荐使用MinGW编译器来开发。</p><h3 id="第一步-安装xmake、mingw、msys以及qt" tabindex="-1">第一步：安装xmake、MinGW、msys以及Qt <a class="header-anchor" href="#第一步-安装xmake、mingw、msys以及qt" aria-label="Permalink to &quot;第一步：安装xmake、MinGW、msys以及Qt&quot;">​</a></h3><p>开发者需要安装下列工具：</p><ul><li><a href="https://www.qt.io/download" target="_blank" rel="noreferrer">Qt</a><ul><li>只需要安装适配MinGW 8.1.0的Qt库。Qt 5 和Qt 6 都可以安装（Qt 5.15.2是一个很好的选择,可以适配MinGW 8.1.0）。不需要安装Qt script等其他框架。</li></ul></li><li><a href="https://github.com/msys2/msys2-installer/releases" target="_blank" rel="noreferrer">msys environment</a></li><li>MinGW 8.1.0编译器（见下文）。 <ul><li>推荐安装Qt提供的MinGW 8.1.0编译器，这个编译器在Tools子目录下。</li></ul></li><li>xmake（见下文）。</li></ul><p>既可以用msys2的pacman安装xmake，也可以用xmake的安装包来安装。</p><p>建议使用pacman, 同时还需要安装其他的包：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pacman -Sy xmake</span></span>
<span class="line"><span style="color:#A6ACCD;">pacman -Sy make</span></span>
<span class="line"><span style="color:#A6ACCD;">pacman -Sy git</span></span>
<span class="line"><span style="color:#A6ACCD;">pacman -Sy mingw-w64-x86_64-7zip</span></span></code></pre></div><p><strong>注意</strong>: msys提供的MinGW版本很高，与墨干的代码不兼容。请通过Qt安装程序或者chocolate安装8.1.0版本的MinGW。</p><p>有时，开发者要更新xmake的包数据：</p><div class="language-pwsh"><button title="Copy Code" class="copy"></button><span class="lang">pwsh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">xrepo update-repo</span></span></code></pre></div><h3 id="第二步-编译" tabindex="-1">第二步：编译 <a class="header-anchor" href="#第二步-编译" aria-label="Permalink to &quot;第二步：编译&quot;">​</a></h3><p>在msys命令行下运行这两条命令。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">xmake config --yes --verbose --diagnosis --plat=mingw --mingw=&lt;newly installed qt address&gt;/Tools/mingw810_64 --qt=&lt;newly installed qt address&gt;/5.x.x/mingw81_64</span></span></code></pre></div><p>上面的命令行会选择Qt安装程序安装的MinGW 8.1.0。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">xmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">research</span></span></code></pre></div><h3 id="第三步-运行单元测试" tabindex="-1">第三步：运行单元测试 <a class="header-anchor" href="#第三步-运行单元测试" aria-label="Permalink to &quot;第三步：运行单元测试&quot;">​</a></h3><p>运行命令<code>windeployqt</code>前需要将<code>&lt;newly installed qt address&gt;/5.15.2/mingw81_64/bin</code>添加到<code>PATH</code>环境变量。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">windeployqt</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--compiler-runtime</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./build/mingw/x86_64/release/</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-printsupport</span></span>
<span class="line"><span style="color:#FFCB6B;">xmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--yes</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--verbose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--diagnosis</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--group=tests</span></span>
<span class="line"><span style="color:#FFCB6B;">xmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--yes</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--verbose</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--diagnosis</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--group=keneral_tests</span></span></code></pre></div><h3 id="第四步-安装到build-packages目录" tabindex="-1">第四步：安装到<code>build/packages</code>目录 <a class="header-anchor" href="#第四步-安装到build-packages目录" aria-label="Permalink to &quot;第四步：安装到\`build/packages\`目录&quot;">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">xmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">research</span></span></code></pre></div><h3 id="第五步-启动墨干" tabindex="-1">第五步：启动墨干 <a class="header-anchor" href="#第五步-启动墨干" aria-label="Permalink to &quot;第五步：启动墨干&quot;">​</a></h3><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">xmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">research</span></span></code></pre></div><h3 id="在vscode下开发-可选" tabindex="-1">在VSCode下开发（可选） <a class="header-anchor" href="#在vscode下开发-可选" aria-label="Permalink to &quot;在VSCode下开发（可选）&quot;">​</a></h3><p>如果用VSCode来开发，xmake可以生成<code>compile_command.json</code>文件。如果提供这份文件，VSCode的C++插件会根据这个文件来识别项目结构，提供正确的语义高亮等语义提示。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">xmake</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">project</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--kind=compile_commands</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./.vscode</span></span></code></pre></div><p>修改<code>.vscode/c_cpp_properties.json</code>文件才能使刚刚生成的<code>compile_command.json</code>文件生效。</p><div class="language-jsonc"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">configurations</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// other configs</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">compilerPath</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">&lt;your configuration&gt;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">cppStandard</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">gnu++17</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">intelliSenseMode</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">windows-gcc-x64</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">compileCommands</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.vscode/compile_commands.json</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">],</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div>`,28),p=[e];function t(c,r,i,y,C,d){return n(),a("div",null,p)}const h=s(o,[["render",t]]);export{m as __pageData,h as default};
