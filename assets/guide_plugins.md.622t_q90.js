import{_ as e,c as s,o as i,V as a}from"./chunks/framework.kgZeNgQl.js";const m=JSON.parse('{"title":"Plugins","description":"","frontmatter":{},"headers":[],"relativePath":"guide/plugins.md","filePath":"guide/plugins.md","lastUpdated":1708759877000}'),n={name:"guide/plugins.md"},t=a('<h1 id="plugins" tabindex="-1">Plugins <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;Plugins&quot;">​</a></h1><p>The plugins of Mogan can be divided into two types: built-in plugins and community plugins. According to their functions, they can be divided into:</p><ul><li><strong>Binary plugins</strong>: provide scheme routines to find the binary and use the binary.</li><li><strong>Image plugins</strong>: provide format conversions for different image formats, such as the PDF Image plugin.</li><li><strong>Language plugins</strong>: provide dictionaries and styles for different natural languages, such as the Chinese Language plugin.</li><li><strong>Data format plugins</strong>: These plugins are used to process data format conversions, such as the HTML Data plugin and LaTeX Data plugin.</li><li><strong>Code plugins</strong>: provide code highlighting definitions and corresponding styles and editor customizations for programming languages, such as the Python Code plugin.</li><li><strong>Session plugins</strong>: provide integration with external systems and have context, such as the Maxima Session plugin.</li></ul><h2 id="binary-plugins" tabindex="-1">Binary Plugins <a class="header-anchor" href="#binary-plugins" aria-label="Permalink to &quot;Binary Plugins&quot;">​</a></h2><p>The source code of binary plugins is located in <code>$TEXMACS_PATH/plugins/binary</code>. Each executable corresponds to a source code file, with the format:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$TEXMACS_PATH/plugins/binary/progs/binary/&lt;name&gt;.scm</span></span></code></pre></div><p>For example, the source code for the Ghostscript command <code>gs</code> is located at:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$TEXMACS_PATH/plugins/binary/progs/binary/gs.scm</span></span></code></pre></div><p>If a user needs to modify the Scheme function that searches for or calls the <code>gs</code> command line, they can simply copy the above <code>gs.scm</code> file to:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$TEXMACS_HOME_PATH/plugins/binary/progs/binary/gs.scm</span></span></code></pre></div><p>And then make the necessary modifications. If <code>gs.scm</code> exists under <code>$TEXMACS_HOME_PATH</code>, it will be loaded before the <code>gs.scm</code> under <code>$TEXMACS_PATH</code>.</p>',11),o=[t];function l(r,c,d,p,g,u){return i(),s("div",null,o)}const f=e(n,[["render",l]]);export{m as __pageData,f as default};
